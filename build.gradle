plugins {
	id 'java'
	id 'groovy'
	id 'jacoco'
	alias(libs.plugins.spring.boot)
	alias(libs.plugins.spring.dependency.management)
	//alias(libs.plugins.graalvmBuildTool)
	alias(libs.plugins.spotless)
}

group = 'com.assetiq'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jar {
	manifest {
		attributes(
				'Main-Class': 'com.assetiq.accounts.AuthServiceApplication'
				)
	}
}
jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.2")
}

dependencies {
	annotationProcessor libs.lombok

	compileOnly libs.lombok
	implementation libs.vavr

	implementation(libs.ory.kratos.client) {
		exclude group: 'org.json', module: 'json'
		because('Kratos client library contains vulnerability with version of org.json')

		exclude group: 'com.squareup.okio', module: 'okio'
		because('Kratos client library contains vulnerability with version of okio')
	}

	implementation( 'com.squareup.okio:okio:3.9.0') {
		because('Okio library from Ory Kratos client library contains vulnerability with version of okios')
	}

	implementation libs.square.okio

	implementation 'org.json:json:20240205'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'org.springframework.session:spring-session-core'
	implementation libs.square.okhttp3
	implementation 'io.micrometer:micrometer-core'
	runtimeOnly libs.micrometer.registry.prometheus

	testImplementation libs.bundles.spock.boot.container.test
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
}

spotless {
	java {
		target 'src/*/java/**/*.java'
		removeUnusedImports()
		cleanthat()
		palantirJavaFormat()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()
	}

	groovy {
		// Use the default importOrder configuration
		importOrder()

		// removes semicolons at the end of lines
		removeSemicolons()
		// the Groovy Eclipse formatter extends the Java Eclipse formatter,
		// so it formats Java files by default (unless `excludeJava` is used).
		greclipse() // has its own section below

		licenseHeader('/* (C) $YEAR */') // or licenseHeaderFile

		//---- Below is for `groovy` only ----

		// excludes all Java sources within the Groovy source dirs from formatting
		excludeJava()
	}
	groovyGradle {
		target '*.gradle' // default target of groovyGradle
		greclipse()
	}

	format 'misc', {
		target fileTree('.') {
			include '**/*.md', '**/.gitignore'
			exclude '**/build/**', '**/build-*/**'
		}
		trimTrailingWhitespace()
		indentWithSpaces(2)
		endWithNewline()
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}


bootJar {
	archiveFileName = project.name + '.jar'
}